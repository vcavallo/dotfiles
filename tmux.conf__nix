set-option -g default-command "$SHELL --login"
set-option -g default-shell $SHELL

set -g mouse on

## !!!!!!!!!!!!!!!! HEY!
## LOOKING FOR THE COMMAND TO OPEN A WINDOW FROM ANOTHER SESSION??
# it's link-window. as in link-window -s main:5 -t secondary:0

############# old customized status bar
# below is optimized for smyk scheme

# setw -g status-bg colour10
# setw -g status-fg colour16
# setw -g window-status-attr bold
# setw -g window-status-current-bg colour234
# setw -g window-status-current-fg colour15
# setw -g window-status-current-attr bold

# set -g status-right '#[fg=colour233,bg=colour241,bold] #(~/bin/battery Discharging; ~/bin/battery Charging) #[fg=colour233,bg=colour245,bold] %B %e %I:%M%p '
# set -g status-right-length 50

############### for tmux-powerline testing:

# set-option -g status on
set-option -g status-interval 2
set-option -g status-justify "centre"
set-option -g status-left-length 85
set-option -g status-right-length 65
# set-option -g status-left "#(~/tmux-powerline/powerline.sh left)"
# set-option -g status-right "#(~/tmux-powerline/powerline.sh right)"


###########################################

# this should fix vim background color
# set -g default-terminal "screen-256color"
set -g default-terminal "xterm-256color"

set -g automatic-rename on
set -g set-titles on # rename terminal tab
set -g set-titles-string '#W' # use window name for tab

set -g status-left-style 'bg=colour05,fg=colour07'
set -g status-left '[ #S ] #{b:pane_current_path} ' # basename of current pane's path

set -g status-right-style 'bg=colour05,fg=colour07'
set -g status-right ' #(date +%%c) '

set -g status-style 'bg=colour04,fg=colour12' # fg seems to be the separators only
set -g window-status-style 'bg=colour04,fg=colour07' # window names in status
set -g window-status-format '< #I #W #{?#{m:*#(whoami)*,#{b:pane_current_path}},~,#{b:pane_current_path}/ } >'
# ^ for all inactive panes, if the path is anything other than my home directory, always
# print it, otherwise if it is home, ONLY print a ~
# for the CURRENT pane, we'll always show the full dirname

set -g window-status-current-style 'reverse,bg=colour04,fg=colour15'
set -g window-status-current-format '[ #W #{pane_current_path}/ ]'

set -g window-status-bell-style 'bg=colour01,fg=colour15'
set -g window-status-separator " "

set -g window-active-style '' # clear weird yellow font in pane's text...

# set -g status-bg colour8 #dark grey
# set -g status-fg colour16 # dark black

set -g automatic-rename on
set -g set-titles on # rename terminal tab
set -g set-titles-string '#W' # use window name for tab

set -g status-left-style 'bg=colour05,fg=colour07'
set -g status-left '[ #S ] #{b:pane_current_path} ' # basename of current pane's path

set -g status-right-style 'bg=colour05,fg=colour07'
set -g status-right ' #(date +%%c) '

set -g status-style 'bg=colour04,fg=colour12' # fg seems to be the separators only
set -g window-status-style 'bg=colour04,fg=colour07' # window names in status
set -g window-status-format '< #I #W #{?#{m:*#(whoami)*,#{b:pane_current_path}},~,#{b:pane_current_path}/ } >'
# ^ for all inactive panes, if the path is anything other than my home directory, always
# print it, otherwise if it is home, ONLY print a ~
# for the CURRENT pane, we'll always show the full dirname

set -g window-status-current-style 'reverse,bg=colour04,fg=colour15'
set -g window-status-current-format '[ #W #{pane_current_path}/ ]'

set -g window-status-bell-style 'bg=colour01,fg=colour15'
set -g window-status-separator " "

set -g window-active-style '' # clear weird yellow font in pane's text...

# set -g status-bg colour8 #dark grey
# set -g status-fg colour16 # dark black

# make active pane border blue (barely noticable)
set -g pane-active-border-style 'bg=brightblue,fg=black'
set -g pane-border-style 'bg=black,fg=black'

set -g prefix C-a

# for dealing with nested tmux sessions
# (press prefix again)
bind-key C-a send-prefix

# easier pane splitting
# bind v split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
# bind s split-window -v -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# easier pane resizing
# testing out pain_control bindings
bind-key -r H resize-pane -L 10
bind-key -r J resize-pane -D 10
bind-key -r K resize-pane -U 10
bind-key -r L resize-pane -R 10
bind-key -r R command-prompt -p 'Enter percentage: ' -I 50 "resize-pane -y %1\%"

# easier pane navigating
# testing out pain_control bindings
bind h   select-pane -L
bind-key h   select-pane -L
bind-key C-h select-pane -L
bind j   select-pane -D
bind-key j   select-pane -D
bind-key C-j select-pane -D
bind k   select-pane -U
bind-key k   select-pane -U
bind-key C-k select-pane -U
bind l   select-pane -R
bind-key l   select-pane -R
bind-key C-l select-pane -R

# The below is going in tpm instead
# IF YOU'RE LOOKING FOR WEIRDNESS EXPLANATION, CHECK TPM PLUGINS!
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

#
# bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
# bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
# bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
# bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# swapping windows
# testing out pain_control bindings
bind-key -r "<" swap-window -t -1
bind-key -r ">" swap-window -t +1

bind a last-window

# bind navigating indexes beginning at 1
# windows:
set -g base-index 1
# panes:
set -g pane-base-index 1

bind r command-prompt -p "rename current window:" "rename-window '%%'"

# turn on vi bindings in copy mode
set-option -g status-keys vi
setw -g mode-keys vi

# copy/paste stuff
# you must 'brew install reattach-to-user-namespace on Mac OS X first!
# but you can always select the copy selection with Enter and paste with ] IN tmux
# deprecated...?
#bind-key -t vi-copy 'v' begin-selection

# choose one of the below:
# this one for mac:
# deprecated...?
#bind-key -t vi-copy 'y' copy-pipe "reattach-to-user-namespace pbcopy"
#unbind -t vi-copy enter
#bind-key -t vi-copy enter copy-pipe "reattach-to-user-namespace pbcopy"

# remove if below works
#bind -tcopy-mode-vi 'v' send -x begin-selection
#bind-key -tcopy-mode-vi 'y' send -x copy-selection

# this might be a fix for stupid tmux upgrade, thanks homebrew
#bind -tcopy-mode-vi v send -x begin-selection
#bind-key -tcopy-mode-vi 'v' send -x begin-selection
#bind-key -tcopy-mode-vi 'y' send -x copy-pipe-and-cancel pbcopy

# bind-key -T copy-mode-vi 'v' send -x begin-selection
# this one for linux (install xclip first!)
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"

# bind-key c command-prompt -p "window name:" "new-window; rename-window '%%'"

# easily re-source this file
bind R source-file ~/.tmux.conf

#### from tmux-sensible:
#
# address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0
# increase scrollback buffer size
set -g history-limit 50000
# tmux messages are displayed for 4 seconds
set -g display-time 4001
# super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

set -g focus-events on

# place theme-specific confs (mostly for colors) here.
# these will override anything above (which is why you should use mostly colors in them)
############ for falcon
# source-file /home/vcavallo/.falcon-tmux.conf
############ end falcon

# set -g @continuum-restore 'off'
# 
# # for vim
# set -g @resurrect-strategy-vim 'session'
# 
# set -g @resurrect-capture-pane-contents 'on'
# 
# # list of plugins
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'tmux-plugins/tmux-sessionist'
# set -g @plugin 'tmux-plugins/tmux-copycat'
# set -g @plugin 'christoomey/vim-tmux-navigator'
# 
# # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run '~/.tmux/plugins/tpm/tpm'
